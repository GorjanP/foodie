source('~/IJS/NLP/scrapper/all_recipes_scraper.R')
library(rvest)
source('~/IJS/NLP/scrapper/all_recipes_scraper.R')
rm(list = ls())
gc()
source('~/IJS/NLP/scrapper/all_recipes_scraper.R')
rm(list = ls())
gc()
source('~/IJS/NLP/scrapper/all_recipes_scraper.R')
rm(list = ls())
gc()
source('~/IJS/NLP/scrapper/all_recipes_scraper.R')
for(i in c(1546:length(urls))){
webpage <- read_html(urls[i])
steps_html <- html_nodes(webpage,'.recipe-directions__list--item')
steps_data <- html_text(steps_html)
steps_data <- gsub("\n","",steps_data)
steps_data <- gsub("            ","",steps_data)
file_name <- paste("D:/Gorjan/Documents/IJS/NLP/scrapper/drinks/recipes/recipe",i,sep = "")
file_name <- paste(file_name,".txt",sep = "")
file <- file(file_name)
writeLines(steps_data,file)
close(file)
ingred_html <- html_nodes(webpage,'.added')
ingred_data <- html_text(ingred_html)
ingred_data <- head(ingred_data,-2)
file_name <- paste("D:/Gorjan/Documents/IJS/NLP/scrapper/drinks/ingredients/recipe",i,sep = "")
file_name <- paste(file_name,".txt",sep = "")
file <- file(file_name)
writeLines(ingred_data,file)
close(file)
}
file <- file("D:/Gorjan/Documents/IJS/NLP/scrapper/drinks/drink-urls.txt")
writeLines(urls,file)
file <- file("D:/Gorjan/Documents/IJS/NLP/scrapper/drinks/drink-urls.txt")
writeLines(urls,file)
rm(list = ls())
gc()
library(coreNLP)
initCoreNLP()
getwd()
setwd("D:/Gorjan/Documents/IJS/fChunk/fchunk/fchunk/")
source('~/IJS/NLP/FoodEx_R/food_enities_v2.R')
rm(list = ls())
gc()
source('~/IJS/fChunk/fchunk/fchunk/food_enities_v2.R')
rez = parse_recipe(num=1, close = TRUE)
rez = parse_recipe(num=1, close = FALSE)
cp_tag_data
cp_tag_data[cp_tag_data$token=='corer',]
fc
cp_tag_data$token[fc==1]
rm(list = ls())
gc()
source('~/IJS/fChunk/fchunk/fchunk/food_enities_v2.R')
rez = parse_recipe(num=1, close = FALSE)
source('~/IJS/fChunk/fchunk/fchunk/food_enities_v2.R')
rm(list = ls())
gc()
source('~/IJS/fChunk/fchunk/fchunk/food_enities_v2.R')
rez = parse_recipe(num=1, close = FALSE)
rm(list =ls())
gc()
source('~/IJS/fChunk/fchunk/fchunk/food_enities_v2.R')
rez = parse_recipe(num=1, close = FALSE)
rm(list =ls())
gc()
library(coreNLp)
library(coreNLP)
initCoreNLP()
source('~/IJS/NLP/scrapper/all_recipes_scraper.R')
rm(list = ls())
gc()
source('~/IJS/fChunk/fchunk/fchunk/food_enities_v2.R')
rez = parse_recipe(num=1, close= FALSE)
cp_tag_data
cp_tag_data[cp_tag_data$token == 'date',]
rm(list = ls())
gc()
a/0
5/0
stop()
source('C:/Users/gorja/Desktop/test.R')
testing
testing()
source('C:/Users/gorja/Desktop/test.R')
testing()
source('C:/Users/gorja/Desktop/test.R')
testing\
testing
testing()
5%2
5 v% 2
5 % 2
5 %/% 2
5 %/% 1
5 %/% 5
5 %/% 5
5 %% 2
5 %% 25
5 %% 5
source('C:/Users/gorja/Desktop/test.R')
testing
testing()
source('C:/Users/gorja/Desktop/test.R')
testing()
source('~/IJS/NLP/scrapper/all_recipes_scraper.R')
rm(list = ls())
source('~/IJS/NLP/scrapper/all_recipes_scraper.R')
source('~/IJS/NLP/scrapper/all_recipes_scraper.R')
get_urls()
file <- file("D:/Gorjan/Documents/IJS/NLP/scrapper/desserts/desserts-urls.txt")
writeLines("bla", file)
rm(list = ls())
source('~/IJS/NLP/scrapper/all_recipes_scraper.R')
get_urls()
rm(list =ls())
gc()
source('~/IJS/NLP/scrapper/all_recipes_scraper.R')
urls <- get_urls()
urls
length(urls)
get_data(urls = urls)
get_data(urls = urls)
get_data(urls = urls)
source('~/IJS/NLP/scrapper/all_recipes_scraper.R')
rm(list = ls())
gc()
source('~/IJS/NLP/scrapper/all_recipes_scraper.R')
urls = get_urls()
rm(list = ls())
gc()
source('~/IJS/NLP/scrapper/all_recipes_scraper.R')
urls = get_urls(43)
urls
get_data(urls = urls)
rm(list = ls())
gc()
getwd()
install.packages("abind")
install.packages("assertthat")
install.packages("backports")
install.packages("BH")
source('~/IJS/fchunk/fchunk/fchunk/load_packages.R')
install.packages(installedpackages[count])
source('~/IJS/fchunk/fchunk/fchunk/load_packages.R')
install.packages(installedpackages[count])
install.packages(installedpackages[count])
install.packages(installedpackages[count])
install.packages(installedpackages[count])
install.packages(installedpackages[count])
library(coreNLP)
library(coreNLP)
install.packages("rJava", type = "source")
install.packages("rJava", type = "source")
install.packages("coreNLP", type = "source")
library(coreNLP)
library(cor )
library(core )
library(coreN)
install.packages("coreNLP", type="source")
library(coreNLP)
install.packages("coreNLP")
library(coreNLP)
install.packages("coreNLP")
library(coreNLP)
library(coreNLP)
initCoreNLP()
downloadCoreNLP()
initCoreNLP()
initCoreNLP()
initCoreNLP()
install.packages("coreNLP")
install.packages("coreNLP")
library(coreNLP)
downloadCoreNLP()
initCoreNLP()
install.packages("rJava")
install.packages("rJava")
initCoreNLP()
library(coreNLP)
initCoreNLP()
initCoreNLP()
library("rJava", lib.loc="~/R/win-library/3.5")
initCoreNLP()
detach("package:rJava", unload=TRUE)
remove.packages("rJava", lib="~/R/win-library/3.5")
install.packages("rJava")
install.packages("rJava")
library(coreNLP)
initCoreNLP()
library(coreNLP)
initCoreNLP()
initCoreNLP()
remove.packages("coreNLP", lib="~/R/win-library/3.5")
install.packages("coreNLP")
install.packages("coreNLP")
library(coreNLP)
downloadCoreNLP()
initCoreNLP()
init_clean_nlp
initCoreNLP()
props.setPropert
props.setProperty
initCoreNLP()
initCoreNLP(type="english")
library(rJava)
.jinit()
.jcall("java/lang/System","S","getProperty","java.version")
initCoreNLP(mem = "6g")
initCoreNLP(mem = "8g", annotators = c("tokenize", "ssplit", "pos"))
initCoreNLP(mem = "8g")
options(java.parameters = "-Xmx6144m")
initCoreNLP(mem = "8g")
library(rJava)
library(coreNLP)
initCoreNLP()
options(java.parameters = "--add-modules java.se.ee")
initCoreNLP()
R CMD javareconf
remove.packages("rJava", lib="~/R/win-library/3.5")
library(coreNLP)
initCoreNLP()
install.packages("rJava", type="source")
install.packages("rJava", type = "source")
library(core)
library(coreNLP)
library(rJava)
install.packages("rJava", type = "source")
library(rJava)
install.packages("rJava")
library(rJava)
librar(coreNLP)
library("coreNLP", lib.loc="~/R/win-library/3.5")
detach("package:rJava", unload=TRUE)
library("rJava", lib.loc="~/R/win-library/3.5")
initCoreNLP()
initCoreNLP()
.jcall("java/lang/System","S","getProperty","java.version")
library(rJava)
.jinit()
.jcall("java/lang/System","S","getProperty","java.version")
library(rJava)
.jinit()
.jcall(])
.jcall("java/lang/System","S","getProperty","java.version")
library(coreNLP)
initCoreNLP()
rm(list =ls())
initCoreNLP(mem = "8g")
library(coreNLP)
initCoreNLP(mem = "8g")
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
install.packages("NLP")
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
install.packages("functional")
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
install.packages("tm")
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
install.packages("gdata")
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
install.packages("openNLP")
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
install.packages("data.tree")
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
rm(list = ls())
gc()
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
parse_recipe(num = 3)
downloadCoreNLP()
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
parse_recipe(num = 3)
install.packages("openNLPdata")
install.packages("openNLPdata")
install.packages("openNLPdata")
install.packages("openNLPdata")
library(coreNLPn)
library(coreNLP)
initCoreNLP(mem='8g\')
initCoreNLP(mem='8g')
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
parse_recipe(num=3)
?install.packages
install.packages("D:\My Documents\Documents\openNLPmodels.en_1.5-1.tar\openNLPmodels.en_1.5-1\openNLPmodels.en.zip")
install.packages("D:\\My Documents\\Documents\\openNLPmodels.en_1.5-1.tar\\openNLPmodels.en_1.5-1\\openNLPmodels.en.zip")
install.packages("D:\\My Documents\\Documents\\openNLPmodels.en_1.5-1.tar.gz")
parse_recipe(num=3)
library("openNLPdata", lib.loc="~/R/win-library/3.5")
parse_recipe(num=3)
install.packages("D:\\My Documents\\Documents\\openNLPmodels.en_1.5-1.tar.gz", repos = NULL)
parse_recipe(num=3)
rm(list = ls())
gc()
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
parse_recipe(num=3, close = FALSE)
s
cp_ann_r\
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
parse_recipe(num=3, close = FALSE)
old_tag_data
old_ann
old_ann$token
tagger("POtatoes")
tagger("POtatoes")
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
tagger("POtatoes")
rm(list = ls())
gc()
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
parse_recipe(num=3, close = FALSe)
parse_recipe(num=3, close = FALSE)
iconv
iconv("Potatoes", to='ASCII//TRANSLIT, sep="")
iconv("Potatoes", to='ASCII//TRANSLIT, sep="")
iconv("Potatoes", to='ASCII//TRANSLIT', sep="")
iconv("Potatoes", to='ASCII//TRANSLIT')
iconv("PotatoeÃ½s", to='ASCII//TRANSLIT')
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
rm(list = ls())
gc()
parse_recipe(num=3)
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
parse_recipe(num=3)
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
parse_recipe(num=3009)
parse_recipe(num=3009, close = FALSE)
s
cp_ann
cp_ann$token
cp_tag_data$token
length(cp_tag_data$token)
length(cp_ann$token)
nrow(cp_ann$token)
s
old_tag_data
old_ann$tokens
old_ann$token
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
parse_recipe(num=10, close = FALSE)
parse_recipe(num=10, close = FALSE)
rm(list = ls())
gc()
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
parse_recipe(num=10, close = FALSE)
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
parse_recipe(num=10, close = FALSE)
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
parse_recipe(num=10, close = FALSE)
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
parse_recipe(num=10, close = FALSE)
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
parse_recipe(num=10, close = FALSE)
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
parse_recipe(num=10, close = FALSE)
rez = parse_recipe(num=10, close = FALSE)
rm(list = ls())
gc()
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
rez = parse_recipe()
rm(list = ls())
gc()
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
rm(list = ls())
gc()
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
parse_recipe()
rm(list = ls())
gc()
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
parse_recipe()
rm(list = ls())
gc()
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
library(coreNLP)
initCoreNLP()
rm(list = ls())
gc()
initCoreNLP(mem = '8g')
rm(list = ls())
gc()
