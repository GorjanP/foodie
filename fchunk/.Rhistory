gc()
source('~/IJS/fchunk/local/scripts/error_deletion.R')
rez = format_recipes()
source('~/IJS/fchunk/local/scripts/error_deletion.R')
rm(list = ls())
gc()
source('~/IJS/fchunk/local/scripts/error_deletion.R')
rez = format_recipes()
cat("bla", file="proba.txt")
cat("bla", file="proba.txt")
cat("bla", file="proba.txt", append =  TRUE)
cat("bla", file="proba.txt", append =  TRUE)
source('~/IJS/fchunk/local/scripts/error_deletion.R')
rm(list = ls())
gc()
source('~/IJS/fchunk/local/scripts/error_deletion.R')
rez = format_recipes()
s <- "Cook the Beef.Watch now."
grep(x = s, pattern = "(W|w)atch (N|n)ow.*")
grep(x = s, pattern = "(W|w)atch (N|n)ow*")
grep(x = s, pattern = "(W|w)atch (N|n)ow.*")
s <- "Cook the Beef.Watch now"
grep(x = s, pattern = "(W|w)atch (N|n)ow.*")
grep(x = s, pattern = "(W|w)atch (N|n)w.*")
length(1)
rm(list = ls())
gc()
source('~/IJS/fchunk/local/scripts/error_deletion.R')
rez = format_recipes()
cat("Dummy.txt" file =  paste("D:/My Documents/Documents/IJS/fchunk/local/final_data/database/", "watch_now.txt"), append = TRUE)
cat("Dummy.txt", file =  paste("D:/My Documents/Documents/IJS/fchunk/local/final_data/database/", "watch_now.txt"), append = TRUE)
source('~/IJS/fchunk/local/scripts/error_deletion.R')
rez = format_recipes()
s <- "Preheat the oven on broiler setting.Watch Now
In a large bowl, combine the roma tomatoes, sun-dried tomatoes, garlic, olive oil, vinegar, basil, salt, and pepper. Allow the mixture to sit for 10 minutes.Watch Now
Cut the baguette into 3/4-inch slices. On a baking sheet, arrange the baguette slices in a single layer. Broil for 1 to 2 minutes, until slightly brown.Watch Now
Divide the tomato mixture evenly over the baguette slices. Top the slices with mozzarella cheese.Watch Now
Broil for 5 minutes, or until the cheese is melted.Watch Now
"
s1 <- gsub(x = s, pattern = "(W|w)atch (N|n)ow.*", replacement = "")
s1
s <- "123456123456"
gsub(x = s, pattern = "2", replacement = "")
s <- "12.3456123456"
gsub(x = s, pattern = "2.*", replacement = "")
gsub(x = s, pattern = "2\.*", replacement = "")
gsub(x = s, pattern = ".", replacement = "")
s <- "12.3456123456"
gsub(x = s, pattern = "2.\*", replacement = "")
gsub(x = s, pattern = "2.\\*", replacement = "")
gsub(x = s, pattern = "2\\.\\*", replacement = "")
gsub(x = s, pattern = "2\\.*", replacement = "")
rm(list = ls())
gc()
source('~/IJS/fchunk/local/scripts/error_deletion.R')
rez = format_recipes()
rm(list = ls())
gc()
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
library(coreNLP)
initCoreNLP(mem='8g')
rm(list = ls())
gc()
library(coreNLP)
initCoreNLP(mem='8g')
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
rez = parse_recipe(num=1, close = TRUE, delete_after = FALSE)
rm(list = ls())
gc()
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
rez = parse_recipe(num=1, close = TRUE, delete_after = FALSE)
rez = parse_recipe(num=1, close = TRUE, delete_after = TRUE)
rm(list = ls())
gc()
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
rez = parse_recipe(num=22821, close = TRUE, delete_after = TRUE)
rm(list = ls())
gc()
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
rez = parse_recipe(num=22821, close = TRUE, delete_after = TRUE)
rm(list = ls())
gc()
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
rez = parse_recipe(num=22821, close = TRUE, delete_after = TRUE)
rm(list = ls())
gc()
library(coreNLP)
initCoreNLP(mem='8g')
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
rez = parse_recipe(num=22821, close = TRUE, delete_after = TRUE)
rm(list = ls())
gc()
library(coreNLP)
initCoreNLP(mem='8g')
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
rez = parse_recipe(num=22821, close = TRUE, delete_after = TRUE)
rm(list = ls())
gc()
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
rez = parse_recipe(num=22821, close = TRUE, delete_after = TRUE)
rm(list = ls(*))
rm(list = ls())
gc()
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
rez = parse_recipe(num=22821, close = TRUE, delete_after = TRUE)
rm(list = ls())
gc()
dir
dir()
file.exists("D:\\My Documents\\Documents\\IJS\\fchunk\\local\\scripts\\error_deletion.R")
file.exists("D:\\My Documents\\Documents\\IJS\\fchunk\\local\\scripts\\error_deletion.RR")
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
output_file <- "D:/My Documents/Documents/IJS/fchunk/local/final_data/database/"
write("<collection>", file = output_file, append = TRUE)
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
output_file <- "D:/My Documents/Documents/IJS/fchunk/local/final_data/database/FoodBase.xml"
recipe_files <- list.files(path = recipe_path, full.names = FALSE)
write("<collection>", file = output_file, append = TRUE)
write("<collection>", file = output_file, append = TRUE)
write("<collection>", file = output_file, append = TRUE)
write("", file = output_file, append = TRUE)
write("<collection>", file = output_file, append = TRUE)
write("<collection>", file = output_file, append = TRUE)
write("\t<source>", file = output_file, append = TRUE)
s <- "0asd1"
s[0]
s[1]
substring(S, 1, 1)
substring(S, 1, 1)
substring(s, 1, 1)
stoi(substring(s, 1, 1))
strtoi(substring(s, 1, 1))
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
rm(list = ls())
gc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
s <- "AG.01.e [Dairy produce]; AG.01.e.02 [Cheese]; AG.01.n [Dishes and prepared food]; AG.01.n.18 [Preserve]; AJ.09.e.01 [White/whiteness]; "
sem2_tags <- strsplit(s)
sem2_tags <- strsplit(x = s, split = ";")
sem2_tags
as.vector(sem2_tags)
as.vector(sem2_tags[[1]])
s1 <- sem2_tags[[1]][2]
s1
trimws(s1)
s
s <- trimws()
s <- trimws(s)
sem2_tags <- strsplit(x = s, split = ";")
sem2_tags
bla <- sapply(sem2_tags, trimws, simplify = TRUE)
bla
bla[1]
bla[2]
bla[3]
bla[4]
bla[5]
bla[6]
as.vector(bla)
bla
length(bla)
sx <- "pero"
sx <-  paste(sx, " zdero")
sx
sx <-  paste(sx, " fero", sep="")
sx
sembla <-""
length(sembla)
sembla==""
sembla <-"s"
sembla==""
sx
substring(sx,1, 2)
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
rm(list = ls())
gc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
s <- "AG.01.n.11 [Bread]; BF.25.m.01 [Eucharistic elements];"
strsplit(x = s, split = ";")
strsplit(x = s, split = ";")[[1]]
s<- strsplit(x = s, split = ";")
s
s[[1]]
s<_ s11
s<- s[[1]]
s
sapply(s, trimws, simplify = TRUE)
sapply(s, trimws, simplify = TRUE)[1]
s
sapply(s, trimws, simplify = TRUE)[1]
sapply(s, trimws, simplify = TRUE)
s
s[1]
s[2]
s
s<-""AG.01.n.11 [Bread]; BF.25.m.01 [Eucharistic elements];""
s<-AG.01.n.11 [Bread]; BF.25.m.01 [Eucharistic elements];"
s<-"\AG.01.n.11 [Bread]; BF.25.m.01 [Eucharistic elements];"
s<-"AG.01.n.11 [Bread]; BF.25.m.01 [Eucharistic elements];"
s
sem2_tags <- s
sem2_tags <- as.vector(strsplit(x = line_sem2, split = ";")[[1]])
sem2_tags <- as.vector(strsplit(x = sem2_g, split = ";")[[1]])
sem2_tags <- as.vector(strsplit(x = sem2_tags, split = ";")[[1]])
sem2_tags
sapply(sem2_tags, trimws, simplify =  TRUE)
sapply(sem2_tags, trimws, simplify =  FALSE)
sapply(sem2_tags, trimws, simplify = TRUE)
sapply(sem2_tags, trimws, simplify =  FALSE)
as.vector(sapply(sem2_tags, trimws, simplify =  FALSE))
as.vector(sapply(sem2_tags, trimws, simplify =  FALSE))
sem2_tags <- as.vector(strsplit(x = sem2_tags, split = ";")[[1]])
sem2_tags
sem2_tags <- "AG.01.n.11 [Bread]; BF.25.m.01 [Eucharistic elements];"
sem2_tags <- as.list(strsplit(x = sem2_tags, split = ";")[[1]])
sem2_tags
as.vector(sapply(sem2_tags, trimws, simplify =  FALSE))
as.vector(sapply(sem2_tags, trimws, simplify =  TRUE))
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
rm(list = ls())
gc()
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
library(coreNLP)
initCoreNLP(mem='8g')
rm(list = ls())
gc()
library(coreNLP)
initCoreNLP(mem='8g')
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
rm(list = ls())
gc()
source('~/IJS/fchunk/fchunk/fchunk/food_enities_v2.R')
s <- "In a medium bowl, mash together the avocados, lime juice, and salt. Mix in onion, cilantro, tomatoes, and garlic. Stir in cayenne pepper. Refrigerate 1 hour for best flavor, or serve immediately.    "
tagger(s)
format_tags(tagger(s))
s <- "AF.12 [Particular plants/herbs/shrubs]; AG.01.l.03 [Spice]; AG.01.l.03 [Spice]AG.01.l.03 [Spice]; "
gsub(x = s, pattern = "\][]")
gsub(x = s, pattern = "\][]")
gsub(x = s, pattern = "][]")
gsub(x = s, pattern = "][^;]")
gsub(x = s, pattern = "][^;]", replacement = "potato"))
gsub(x = s, pattern = "][^;]", replacement = "potato")
gsub(x = s, pattern = "]([^;])", replacement = "];\\1", )
gsub(x = s, pattern = "]([^;])", replacement = "];\\1 ", )
s <- "AF.12 [Particular plants/herbs/shrubs]; AG.01.l.03 [Spice]; AG.01.l.03 [Spice]AG.01.l.03 [Spice]; "
gsub(x = s, pattern = "]([^;])", replacement = "];\\1 ", )
gsub(x = s, pattern = "]([^;])", replacement = "]; \\1", )
s1 <-"AF.12 [Particular plants/herbs/shrubs]; AG.01.l.03 [Spice]; AG.01.l.03 [Spice]AG.01.l.03 [Spice]; "
gsub(x = s, pattern = "]([^;])", replacement = "]; \\1", )
rm(list = ls(\))
rm(list = ls(\))
rm(list = ls())
gc()
s <- "AF.12 [Particular plants/herbs/shrubs]; AG.01.l.03 [Spice]; AG.01.l.03 [Spice]AG.01.l.03 [Spice]; "
gsub(x = s, pattern = "]([^;])", replacement = "]; \\1")
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
rm(list = ls())
gc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
rm(list = ls())
gc()
vector()
c()
out_vec <- as.vector(c())
out-vec
out_vec
as.vector()
as.vector(x = )
as.vector(x = NULL)
out_vec <- append(out_vec, "AG.01 [Food]")
out_vec
out_vec <- append(out_vec, "AG.01 [Food]")
out_vec
out_vec <- as.vector(c())
length(out_vec)
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
rm(list = ls())
gc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
s <- "boiling water potato"
grep(x = s, pattern = "[Ww]ater")
grep(x = s, pattern = "[Ww]aterr")
grep(x = s, pattern = "[Ww]ater")
grep(x = s, pattern = "water", ignore.case = TRUE)
s <- "Water"
grep(x = s, pattern = "water", ignore.case = TRUE)
grep(x = s, pattern = "(ricotta)|(feta)|(mozzarella)|(parmesan)|(muenster)|(monterey jack)|(monterey-jack)|(cheddar)", ignore.case = TRUE)
s <- "monterey JACK"
grep(x = s, pattern = "(ricotta)|(feta)|(mozzarella)|(parmesan)|(muenster)|(monterey jack)|(monterey-jack)|(cheddar)", ignore.case = TRUE)
s <- "monterey-JACK"
grep(x = s, pattern = "(ricotta)|(feta)|(mozzarella)|(parmesan)|(muenster)|(monterey jack)|(monterey-jack)|(cheddar)", ignore.case = TRUE)
s <- "feta"
grep(x = s, pattern = "(ricotta)|(feta)|(mozzarella)|(parmesan)|(muenster)|(monterey jack)|(monterey-jack)|(cheddar)", ignore.case = TRUE)
out_sem2 <- ""
s <- "juices"
grep(x = s, pattern = "juice")
grep(x = s, pattern = "juice", ignore.case = TRUE) && !grep(x = line_fc, pattern = "(meat)|(chicken)", ignore.case = TRUE)
grep(x = s, pattern = "juice", ignore.case = TRUE) && !grep(x = s, pattern = "(meat)|(chicken)", ignore.case = TRUE)
1 && 0
s <-
s <- "meat juices"
s <-
grep(x = s, pattern = "juice", ignore.case = TRUE) && !grep(x = s, pattern = "(meat)|(chicken)", ignore.case = TRUE)
s <- "lime juices"
grep(x = s, pattern = "juice", ignore.case = TRUE) && !grep(x = s, pattern = "(meat)|(chicken)", ignore.case = TRUE)
!grep(x = s, pattern = "(meat)|(chicken)", ignore.case = TRUE)
grep(x = s, pattern = "(meat)|(chicken)", ignore.case = TRUE)
if(0)
{}
if(0)
{print("hello")}
if(1)
{print("hello")}
if(grep(x = s, pattern = "(meat)|(chicken)", ignore.case = TRUE))
{print("hello")}
{print("hello")}
grep(x = line_fc, pattern = "water", ignore.case = TRUE)
grep(x = s, pattern = "water", ignore.case = TRUE)
length(grep(x = s, pattern = "water", ignore.case = TRUE))
length(grep(x = s, pattern = "lime", ignore.case = TRUE))
s<- "cake mix"
length(grep(x = line_fc, pattern = "\bcake\b", ignore.case = TRUE))
length(grep(x = s, pattern = "\bcake\b", ignore.case = TRUE))
length(grep(x = line_fc, pattern = "\bcake\b", ignore.case = TRUE))
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
length(grep(x = line_fc, pattern = "\\bcake\\b", ignore.case = TRUE))
length(grep(x = s, pattern = "\\bcake\\b", ignore.case = TRUE))
s<-"pancake cakepan"
length(grep(x = s, pattern = "\\bcake\\b", ignore.case = TRUE))
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
rm(list = ls())
gc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
parse_to_bioc()
rm(list = ls())
gc()
parse_to_bioc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
parse_to_bioc()
s<-"cake"
length(grep(x = line_fc, pattern = "\\bcake\\b", ignore.case = TRUE)) > 0
length(grep(x = s, pattern = "\\bcake\\b", ignore.case = TRUE)) > 0
out_sem2 <- as.vector("AG.01.n.13 [Cake]", "AG.01.o [Animal food]")
out_sem2 <- as.vector(c("AG.01.n.13 [Cake]", "AG.01.o [Animal food]"))
out_sem2
out_sem2 <- out_sem2[out_sem2 != "AG.01.o [Animal food]"]
outsem_2
out_sem2
rm(list = ls())
gc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
rm(list = ls())
gc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
rm(list = ls())
gc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
rm(list = ls())
gc()
source('~/IJS/fchunk/local/scripts/bioc_parser.R')
parse_to_bioc()
rm(list = ls())
gc()
[1, 2,3]
(1, 2, 3)
c(1, 2, 3)
plot(c(1,2,3))
data = c((1, 1))
data = as.vector(c(1, 1))
data
data.append(as.vector(c(2, 3)))
data.rbind(as.vector(c(2, 3)))
1:3
x <- 1:3
y <- 4:6
list(x, y)
plot(list(x,y))
plot(x, y)
range(1, 10)
seq(1, 10)
seq(1, 10, 5)
seq(5, 200, 5)
x <- seq(5, 200, 5)
rm(list = ls(\))
rm(list = ls())
x <- seq(5, 200, 5)
x
c(1, 2, 3)
y <- c(5, 12, 16, 22, 26, 30, 38, 42, 47, 51, 76, 80, 86, 91, 97, 101, 106, 111, 116, 121, 126, 131, 137, 141, 145, 151, 156, 161, 165, 171, 177, 182, 187, 190, 196,201)
y
c
x
len(y)
length(y)
length(x)
y <- c(5, 12, 16, 22, 26, 30, 38, 42, 47, 51, 56, 61, 66, 71, 76, 80, 86, 91, 97, 101, 106, 111, 116, 121, 126, 131, 137, 141, 145, 151, 156, 161, 165, 171, 177, 182, 187, 190, 196,201)
length(y)
plot(x, y)
plot(x, y, xlab = "k", ylab = "Challenges needed to break"
)
plot(x, y, xlab = "k", ylab = "Challenges needed to break", ann = TRUE)
plot(x, y, xlab = "k", ylab = "Challenges needed to break", ann = FALSE)
?plot
plot(x, y, xlab = "k", ylab = "Challenges needed to break")
axis(1, seq(0, 200, 5))
axis(1, seq(0, 200, 10))
plot(x, y, xlab = "k", ylab = "Challenges needed to break")
axis(1, seq(0, 200, 10))
axis(2, seq(0, 200, 10))
rm(list = ls())
gc()
latex(tt)
install.packages("Hmisc")
dvipng.dvi <-
function (object, file, ...)
{
cmd <- if (missing(file))
paste("dvipng -T tight", shQuote(object$file))
else paste("dvipng -T tight", "-o", file, shQuote(object$file))
invisible(sys(cmd))
}
?table
table(1 2 3)
table((2,2,2,2))
table.
library(coreNLP)
initCoreNLP(mem='8g')
source('~/IJS/fchunk/foodie/fchunk/fchunk/food_enities_v2.R')
parse_recipe(1, close = TRUE)
parse_recipe(1, close = TRUE)
asd = parse_recipe(1, close = TRUE)
asd = parse_recipe(1, close = TRUE)
rm(list = ls())
gc(0)
gc()
